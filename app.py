# -*- coding: utf-8 -*-
from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import base64
import os

app = Flask(__name__)
CORS(app, resources={
    r"/api/*": {
        "origins": ["*"],
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "Content-Type,Authorization")
        response.headers.add('Access-Control-Allow-Methods', "GET,POST,OPTIONS")
        return response

# –ë–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
AUTH_TOKEN = "client_site_zni:UtYf#8_5eWSd"
AUTH_HEADER = base64.b64encode(AUTH_TOKEN.encode()).decode()

# URL –≤–Ω–µ—à–Ω–µ–≥–æ API
EXTERNAL_API_URL = "https://betaportal.nomadlife.kz:8082/ords/cab/ws/gons/calculate2"

@app.route('/api/calculate', methods=['POST'])
def calculate():
    """
    –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON:
    {
        "p_bd": "18.08.1995",      # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        "p_val": 3,                # –ó–Ω–∞—á–µ–Ω–∏–µ
        "p_susn": 0,               # –ü–∞—Ä–∞–º–µ—Ç—Ä SUSN
        "p_ins_prem": 10,          # –°—Ç—Ä–∞—Ö–æ–≤–∞—è –ø—Ä–µ–º–∏—è
        "p_term": 11,              # –°—Ä–æ–∫
        "p_period": 12             # –ü–µ—Ä–∏–æ–¥
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_params = ['p_bd', 'p_val']
        for param in required_params:
            if param not in data:
                return jsonify({"error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}"}), 400
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
        params = {
            'p_bd': data.get('p_bd'),
            'p_val': data.get('p_val', 1),
            'p_susn': data.get('p_susn', 0),
            'p_ins_prem': data.get('p_ins_prem', 10),
            'p_term': data.get('p_term', 11),
            'p_period': data.get('p_period', 12)
        }
        
        print(f"üìä –ó–∞–ø—Ä–æ—Å –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': f'Basic {AUTH_HEADER}'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        form_data = {}
        for key, value in params.items():
            form_data[key] = str(value)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API
        try:
            response = requests.get(
                EXTERNAL_API_URL,
                params=params,
                headers=headers,
                timeout=30,
                verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
            )
            
            print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...")
            
            if response.status_code == 200:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
                    external_data = response.json()
                    
                    return jsonify({
                        "success": True,
                        "data": external_data,
                        "meta": {
                            "proxy_service": "calculator-service",
                            "external_api": "betaportal.nomadlife.kz",
                            "request_params": params
                        }
                    })
                    
                except ValueError as e:
                    # –ï—Å–ª–∏ JSON –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
                    return jsonify({
                        "success": True,
                        "data": {
                            "raw_response": response.text,
                            "content_type": response.headers.get('content-type', 'unknown')
                        },
                        "meta": {
                            "proxy_service": "calculator-service",
                            "external_api": "betaportal.nomadlife.kz",
                            "request_params": params,
                            "note": "Response is not valid JSON"
                        }
                    })
            else:
                return jsonify({
                    "success": False,
                    "error": f"–í–Ω–µ—à–Ω–∏–π API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}",
                    "details": response.text[:1000]
                }), response.status_code
                
        except requests.exceptions.SSLError as e:
            print(f"üîí SSL –æ—à–∏–±–∫–∞: {str(e)}")
            return jsonify({
                "success": False,
                "error": "SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API",
                "details": str(e)
            }), 502
            
        except requests.exceptions.Timeout as e:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç: {str(e)}")
            return jsonify({
                "success": False,
                "error": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API",
                "details": str(e)
            }), 504
            
        except requests.exceptions.RequestException as e:
            print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
            return jsonify({
                "success": False,
                "error": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API",
                "details": str(e)
            }), 502
        
    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }), 500

@app.route('/api/calculate-simple', methods=['POST'])
def calculate_simple():
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π endpoint –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    {
        "birthdate": "18.08.1995",
        "value": 3
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400
        
        birthdate = data.get('birthdate')
        value = data.get('value', 1)
        
        if not birthdate:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä birthdate"}), 400
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π API
        calc_data = {
            "p_bd": birthdate,
            "p_val": value,
            "p_susn": 0,
            "p_ins_prem": 10,
            "p_term": 11,
            "p_period": 12
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π request —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        import json
        from werkzeug.test import EnvironBuilder
        from flask import Flask
        
        builder = EnvironBuilder(method='POST', data=json.dumps(calc_data), content_type='application/json')
        env = builder.get_environ()
        
        with app.request_context(env):
            return calculate()
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: {str(e)}"
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "OK", 
        "service": "calculator-proxy-service",
        "external_api": "betaportal.nomadlife.kz:8082"
    })

@app.route('/', methods=['GET'])
def home():
    return jsonify({
        "service": "Calculator Proxy Service",
        "description": "–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è",
        "endpoints": {
            "/api/calculate": "POST - –ü–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            "/api/calculate-simple": "POST - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            "/health": "GET - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
        },
        "external_api": "https://betaportal.nomadlife.kz:8082/ords/cab/ws/gons/calculate2",
        "example_request": {
            "url": "/api/calculate",
            "method": "POST",
            "body": {
                "p_bd": "18.08.1995",
                "p_val": 3,
                "p_susn": 0,
                "p_ins_prem": 10,
                "p_term": 11,
                "p_period": 12
            }
        }
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5004))
    print(f"üßÆ –ó–∞–ø—É—Å–∫ Calculator Proxy Service –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(debug=False, host='0.0.0.0', port=port)
